import { DatabaseAccessType, System } from "@common/system";

export const systemMock: System = {
  id: "1",
  name: "InterSCity",
  description: "Platform for smart cities",
  modules: [
    { id: "1", name: "two-services-1" },
    { id: "2", name: "two-services-2" },
  ],
  services: [
    {
      id: "1",
      moduleId: "1",
      name: "service1",
      responsibility: "",
      operations: ["GET /service1"],
    },
    {
      id: "2",
      moduleId: "1",
      name: "service2",
      responsibility: "",
      operations: ["GET /service2"],
    },
    {
      id: "3",
      moduleId: "2",
      name: "service3",
      responsibility: "",
      operations: ["GET /service3"],
    },
    {
      id: "4",
      moduleId: "2",
      name: "service4",
      responsibility: "",
      operations: ["GET /service4"],
    },
  ],
  databases: [
    { id: "1", model: "sql" },
    { id: "2", model: "nosql" },
    { id: "3", model: "sql" },
    { id: "4", model: "nosql" },
  ],
  databasesUsages: [
    {
      databaseId: "1",
      serviceId: "1",
      namespace: "service1-db1",
      accessType: DatabaseAccessType.READ,
    },
    {
      databaseId: "2",
      serviceId: "2",
      namespace: "service2-db2",
      accessType: DatabaseAccessType.WRITE,
    },
    {
      databaseId: "3",
      serviceId: "3",
      namespace: "service3-db3",
      accessType: DatabaseAccessType.READ_AND_WRITE,
    },
    {
      databaseId: "4",
      serviceId: "4",
      namespace: "service4-db4",
      accessType: DatabaseAccessType.READ,
    },
  ],
  syncOperations: [
    { from: "1", to: "3", label: "GET /service3" },
    { from: "2", to: "1", label: "GET /service1" },
  ],
  asyncOperations: [
    { from: "3", to: "4", label: "OPERATION-CREATED" },
    { from: "4", to: "2", label: "OPERATION-CREATED" },
  ],
};

export const expectedNodesWhenBuildingGraphForServices = [
  {
    id: "s1",
    label: "service1",
    type: "service",
    operations: ["GET /service1"],
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "s2",
    label: "service2",
    type: "service",
    operations: ["GET /service2"],
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "s3",
    label: "service3",
    type: "service",
    operations: ["GET /service3"],
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "s4",
    label: "service4",
    type: "service",
    operations: ["GET /service4"],
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service1_from_s1",
    label: "GET /service1",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service2_from_s2",
    label: "GET /service2",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service3_from_s3",
    label: "GET /service3",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service4_from_s4",
    label: "GET /service4",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db1",
    label: "service1-db1",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db2",
    label: "service2-db2",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db3",
    label: "service3-db3",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db4",
    label: "service4-db4",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
];

export const expectedLinksWhenBuildingGraphForServices = [
  {
    id: "opGET /service1/s1",
    source: "s1",
    target: "op_GET /service1_from_s1",
    type: "operation",
    nodePairId: "op_GET /service1_from_s1_s1",
    dashed: false,
  },
  {
    id: "opGET /service2/s2",
    source: "s2",
    target: "op_GET /service2_from_s2",
    type: "operation",
    nodePairId: "op_GET /service2_from_s2_s2",
    dashed: false,
  },
  {
    id: "opGET /service3/s3",
    source: "s3",
    target: "op_GET /service3_from_s3",
    type: "operation",
    nodePairId: "op_GET /service3_from_s3_s3",
    dashed: false,
  },
  {
    id: "opGET /service4/s4",
    source: "s4",
    target: "op_GET /service4_from_s4",
    type: "operation",
    nodePairId: "op_GET /service4_from_s4_s4",
    dashed: false,
  },
  {
    id: "db1/s1",
    source: "s1",
    target: "db1",
    label: "R",
    type: "db",
    nodePairId: "db1_s1",
    dashed: false,
  },
  {
    id: "db2/s2",
    source: "s2",
    target: "db2",
    label: "W",
    type: "db",
    nodePairId: "db2_s2",
    dashed: false,
  },
  {
    id: "db3/s3",
    source: "s3",
    target: "db3",
    label: "R/W",
    type: "db",
    nodePairId: "db3_s3",
    dashed: false,
  },
  {
    id: "db4/s4",
    source: "s4",
    target: "db4",
    label: "R",
    type: "db",
    nodePairId: "db4_s4",
    dashed: false,
  },
  {
    id: "sync-s3/s1",
    source: "s3",
    target: "s1",
    type: "sync",
    label: "GET /service3",
    nodePairId: "s1_s3",
    dashed: false,
  },
  {
    id: "sync-s1/s2",
    source: "s1",
    target: "s2",
    type: "sync",
    label: "GET /service1",
    nodePairId: "s1_s2",
    dashed: false,
  },
  {
    id: "async-s3/s4",
    source: "s3",
    target: "s4",
    type: "async",
    label: "OPERATION-CREATED",
    nodePairId: "s3_s4",
    dashed: true,
  },
  {
    id: "async-s4/s2",
    source: "s4",
    target: "s2",
    type: "async",
    label: "OPERATION-CREATED",
    nodePairId: "s2_s4",
    dashed: true,
  },
];

export const expectedNodesWhenBuildingGraphForModules = [
  {
    id: "m1",
    label: "two-services-1",
    type: "module",
    operations: ["GET /service1", "GET /service2"],
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "m2",
    label: "two-services-2",
    type: "module",
    operations: ["GET /service3", "GET /service4"],
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service1_from_m1",
    label: "GET /service1",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service2_from_m1",
    label: "GET /service2",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service3_from_m2",
    label: "GET /service3",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "op_GET /service4_from_m2",
    label: "GET /service4",
    type: "operation",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db1",
    label: "service1-db1",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db2",
    label: "service2-db2",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db3",
    label: "service3-db3",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
  {
    id: "db4",
    label: "service4-db4",
    type: "database",
    neighbors: expect.any(Array),
    links: expect.any(Array),
  },
];

export const expectedLinksWhenBuildingGraphForModules = [
  {
    id: "opGET /service1/m1",
    source: "m1",
    target: "op_GET /service1_from_m1",
    type: "operation",
    nodePairId: "m1_op_GET /service1_from_m1",
    dashed: false,
  },
  {
    id: "opGET /service2/m1",
    source: "m1",
    target: "op_GET /service2_from_m1",
    type: "operation",
    nodePairId: "m1_op_GET /service2_from_m1",
    dashed: false,
  },
  {
    id: "opGET /service3/m2",
    source: "m2",
    target: "op_GET /service3_from_m2",
    type: "operation",
    nodePairId: "m2_op_GET /service3_from_m2",
    dashed: false,
  },
  {
    id: "opGET /service4/m2",
    source: "m2",
    target: "op_GET /service4_from_m2",
    type: "operation",
    nodePairId: "m2_op_GET /service4_from_m2",
    dashed: false,
  },
  {
    id: "db1/m1",
    source: "m1",
    target: "db1",
    label: "R",
    type: "db",
    nodePairId: "db1_m1",
    dashed: false,
  },
  {
    id: "db2/m1",
    source: "m1",
    target: "db2",
    label: "W",
    type: "db",
    nodePairId: "db2_m1",
    dashed: false,
  },
  {
    id: "db3/m2",
    source: "m2",
    target: "db3",
    label: "R/W",
    type: "db",
    nodePairId: "db3_m2",
    dashed: false,
  },
  {
    id: "db4/m2",
    source: "m2",
    target: "db4",
    label: "R",
    type: "db",
    nodePairId: "db4_m2",
    dashed: false,
  },
  {
    id: "sync-m2/m1",
    source: "m2",
    target: "m1",
    type: "sync",
    label: "GET /service3",
    nodePairId: "m1_m2",
    curvature: -0.5,
    dashed: false,
  },
  {
    id: "sync-m1/m1",
    source: "m1",
    target: "m1",
    type: "sync",
    label: "GET /service1",
    nodePairId: "m1_m1",
    curvature: 1,
    dashed: false,
  },
  {
    id: "async-m2/m2",
    source: "m2",
    target: "m2",
    type: "async",
    label: "OPERATION-CREATED",
    nodePairId: "m2_m2",
    curvature: 1,
    dashed: true,
  },
  {
    id: "async-m2/m1",
    source: "m2",
    target: "m1",
    type: "async",
    label: "OPERATION-CREATED",
    nodePairId: "m1_m2",
    curvature: 0.5,
    dashed: true,
  },
];
